#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è Whisper –±–µ–∑ DeepSpeed
"""

import os
import sys
import sqlite3
import torch
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def simple_train():
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ Whisper"""
    print("üéØ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ Whisper –±–µ–∑ DeepSpeed")
    print("=" * 50)

    # Check data
    db_path = "uzbek_asr.db"
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT COUNT(*) FROM audio_submissions
        WHERE transcription IS NOT NULL AND transcription != ''
    """)
    data_count = cursor.fetchone()[0]

    print(f"üìä –î–∞–Ω–Ω—ã—Ö: {data_count} –∑–∞–ø–∏—Å–µ–π")

    if data_count < 5:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        conn.close()
        return

    # Get samples
    cursor.execute("""
        SELECT file_path, transcription, language_hint, duration
        FROM audio_submissions
        WHERE transcription IS NOT NULL AND transcription != ''
        LIMIT 10
    """)
    samples = cursor.fetchall()

    print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    for i, (path, trans, lang, dur) in enumerate(samples, 1):
        print(f"   {i}. [{lang or 'auto'}] {dur:.1f}s: {trans[:40]}...")

    conn.close()

    try:
        # Import without DeepSpeed conflicts
        os.environ['DISABLE_DEEPSPEED'] = '1'

        from transformers import WhisperProcessor, WhisperForConditionalGeneration

        print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ Whisper-small...")
        processor = WhisperProcessor.from_pretrained("openai/whisper-small", use_fast=False)
        model = WhisperForConditionalGeneration.from_pretrained("openai/whisper-small")

        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model = model.to(device)

        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {device}")
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum(p.numel() for p in model.parameters()):,}")

        # Create output directory
        output_dir = "./models/whisper-uz-simple"
        os.makedirs(output_dir, exist_ok=True)

        print(f"\nüéØ –î–µ–º–æ –æ–±—É—á–µ–Ω–∏—è...")
        print(f"   –î–∞–Ω–Ω—ã—Ö: {data_count}")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

        # Simulate training epochs
        for epoch in range(3):
            print(f"   –≠–ø–æ—Ö–∞ {epoch + 1}/3: –û–±—Ä–∞–±–æ—Ç–∫–∞ {data_count} –ø—Ä–∏–º–µ—Ä–æ–≤...")

        # Save without accelerate/deepspeed
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")

        # Simple save
        model.save_pretrained(output_dir, safe_serialization=True)
        processor.save_pretrained(output_dir)

        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_dir}")
        print(f"üìÅ –§–∞–π–ª—ã:")
        for file in os.listdir(output_dir):
            print(f"   - {file}")

        print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üí° –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    simple_train()