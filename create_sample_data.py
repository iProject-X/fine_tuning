#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
"""

import os
import json
from pathlib import Path

def create_sample_data():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("./data/audio_samples", exist_ok=True)
    os.makedirs("./data/manual_data", exist_ok=True)

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —É–∑–±–µ–∫—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
    uzbek_samples = [
        "Assalomu alaykum, qalaysiz?",
        "Men O'zbekistondan kelganman",
        "Bugun ob-havo juda yaxshi",
        "Biz birga ishlashimiz kerak",
        "Men uzbek tilida gaplashishni yaxshi ko'raman",
        "Toshkent shahrida ko'p odamlar yashaydi",
        "O'qish juda muhim va foydali",
        "Kelajakda men dasturchi bo'lmoqchiman",
        "Oila bilan birga vaqt o'tkazish yoqimli",
        "Teknologiya hayotimizni osonlashtiradi"
    ]

    # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—É–∑–±–µ–∫—Å–∫–∏–π + —Ä—É—Å—Å–∫–∏–π)
    mixed_samples = [
        "Men bugun —Ä—ã–Ω–æ–∫ ga boraman",
        "–ü—Ä–∏–≤–µ—Ç, qalaysiz qarindosh?",
        "Siz –∫–æ–º–ø—å—é—Ç–µ—Ä bilan ishlaysizmi?",
        "Bu –ø—Ä–æ–≥—Ä–∞–º–º–∞ juda zo'r",
        "–î–∞–≤–∞–π—Ç–µ birga ishlaylik",
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç orqali aloqa qilamiz",
        "–ú–∞—à–∏–Ω–∞ uchun –±–µ–Ω–∑–∏–Ω kerak",
        "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç da o'qiyapman"
    ]

    # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
    for i, text in enumerate(uzbek_samples, 1):
        # –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with open(f"./data/audio_samples/uzbek_{i:02d}.txt", "w", encoding="utf-8") as f:
            f.write(text)

        # –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        Path(f"./data/audio_samples/uzbek_{i:02d}.wav").touch()

        print(f"   ‚úÖ uzbek_{i:02d}: {text}")

    # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
    for i, text in enumerate(mixed_samples, 1):
        with open(f"./data/audio_samples/mixed_{i:02d}.txt", "w", encoding="utf-8") as f:
            f.write(text)

        Path(f"./data/audio_samples/mixed_{i:02d}.wav").touch()

        print(f"   ‚úÖ mixed_{i:02d}: {text}")

    # –°–æ–∑–¥–∞—Ç—å JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = {
        "dataset_info": {
            "name": "Uzbek Speech Samples",
            "language": "uz",
            "mixed_language": True,
            "total_samples": len(uzbek_samples) + len(mixed_samples),
            "uzbek_only": len(uzbek_samples),
            "mixed_language_samples": len(mixed_samples)
        },
        "samples": []
    }

    # –î–æ–±–∞–≤–∏—Ç—å —É–∑–±–µ–∫—Å–∫–∏–µ –æ–±—Ä–∞–∑—Ü—ã
    for i, text in enumerate(uzbek_samples, 1):
        metadata["samples"].append({
            "id": f"uzbek_{i:02d}",
            "audio_file": f"uzbek_{i:02d}.wav",
            "text_file": f"uzbek_{i:02d}.txt",
            "transcription": text,
            "language": "uz",
            "type": "monolingual"
        })

    # –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ—à–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã
    for i, text in enumerate(mixed_samples, 1):
        metadata["samples"].append({
            "id": f"mixed_{i:02d}",
            "audio_file": f"mixed_{i:02d}.wav",
            "text_file": f"mixed_{i:02d}.txt",
            "transcription": text,
            "language": "uz-ru",
            "type": "code_switching"
        })

    with open("./data/audio_samples/metadata.json", "w", encoding="utf-8") as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)

    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(uzbek_samples) + len(mixed_samples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"üìÅ –ü–∞–ø–∫–∞: ./data/audio_samples/")
    print(f"üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ./data/audio_samples/metadata.json")

    print(f"\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–º–µ–Ω–∏—Ç–µ .wav —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏")

def show_usage():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print(f"\n" + "="*60)
    print(f"üìã –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–°–û–õ–¨–ù–û–ì–û –¢–†–ï–ù–ï–†–ê")
    print(f"="*60)

    examples = [
        ("üì± –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Telegram –±–æ—Ç–∞:", "python console_trainer.py --source telegram"),
        ("üìÅ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:", "python console_trainer.py --source files --data-dir ./data/audio_samples"),
        ("‚úçÔ∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", "python console_trainer.py --source manual"),
        ("üîó –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:", "python console_trainer.py --source combined --data-dir ./data/audio_samples"),
        ("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", "python console_trainer.py --source telegram --model-size medium --epochs 5"),
    ]

    for desc, cmd in examples:
        print(f"\n{desc}")
        print(f"   {cmd}")

    print(f"\n" + "="*60)
    print(f"üìù –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
    print(f"="*60)

    data_prep_steps = [
        "1. üìÇ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏",
        "2. üìù –î–ª—è –∫–∞–∂–¥–æ–≥–æ audio.wav —Å–æ–∑–¥–∞–π—Ç–µ audio.txt —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π",
        "3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python console_trainer.py --source files --data-dir your_folder",
        "",
        "üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –±–æ—Ç–∞:",
        "   python console_trainer.py --source telegram"
    ]

    for step in data_prep_steps:
        print(step)

if __name__ == "__main__":
    create_sample_data()
    show_usage()