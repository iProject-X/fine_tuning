#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Uzbek ASR
"""

import os
import sys
import asyncio
import argparse
import subprocess
from pathlib import Path

def print_banner():
    """–í—ã–≤–µ—Å—Ç–∏ –±–∞–Ω–Ω–µ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     UZBEK WHISPER ASR SYSTEM                ‚ïë
‚ïë              Fine-tuning & Data Collection Platform         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    required_files = [
        ".env",
        "requirements.txt",
        "src/data/collectors/telegram_bot_collector.py",
        "src/models/training/distributed_trainer.py",
        "src/serving/api/fastapi_app.py"
    ]

    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .env
    if not os.path.getsize(".env") > 10:
        print("‚ùå –§–∞–π–ª .env –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã")
        return False

    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
                      check=True, capture_output=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def start_telegram_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        subprocess.Popen([sys.executable, "run_telegram_bot.py"])
        print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False

def start_api_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä"""
    print("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists("src/serving/api/fastapi_app.py"):
            print("‚ö†Ô∏è  FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True

        subprocess.Popen([
            sys.executable, "-m", "uvicorn",
            "src.serving.api.fastapi_app:app",
            "--host", "0.0.0.0",
            "--port", "8000",
            "--reload"
        ])
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        return False

def start_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    print("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    try:
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs("logs", exist_ok=True)
        os.makedirs("data/metrics", exist_ok=True)
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
    try:
        result = subprocess.run(["pgrep", "-f", "run_telegram_bot.py"],
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("ü§ñ Telegram –±–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("ü§ñ Telegram –±–æ—Ç: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        print("ü§ñ Telegram –±–æ—Ç: ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    try:
        result = subprocess.run(["pgrep", "-f", "uvicorn"],
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("üåê API —Å–µ—Ä–≤–µ—Ä: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("üåê API —Å–µ—Ä–≤–µ—Ä: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        print("üåê API —Å–µ—Ä–≤–µ—Ä: ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã
    if os.path.exists("uzbek_asr.db"):
        size = os.path.getsize("uzbek_asr.db")
        print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ {size} –±–∞–π—Ç")
    else:
        print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞")

    if os.path.exists("logs"):
        log_files = len([f for f in os.listdir("logs") if f.endswith(".log")])
        print(f"üìù –õ–æ–≥–∏: ‚úÖ {log_files} —Ñ–∞–π–ª–æ–≤")
    else:
        print("üìù –õ–æ–≥–∏: ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")

def stop_system():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram –±–æ—Ç–∞
        subprocess.run(["pkill", "-f", "run_telegram_bot.py"], capture_output=True)
        print("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        pass

    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä
        subprocess.run(["pkill", "-f", "uvicorn"], capture_output=True)
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Uzbek Whisper ASR System")
    parser.add_argument("action", choices=[
        "start", "stop", "status", "setup", "bot-only", "api-only", "test"
    ], help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    args = parser.parse_args()

    print_banner()

    if args.action == "setup":
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        if not install_dependencies():
            sys.exit(1)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ .env.example)")
        print("2. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_system.py start")

    elif args.action == "test":
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        try:
            subprocess.run([sys.executable, "test_bot.py"], check=True)
        except subprocess.CalledProcessError:
            print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            sys.exit(1)

    elif args.action == "start":
        if not check_requirements():
            print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_system.py setup")
            sys.exit(1)

        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        start_monitoring()
        start_telegram_bot()
        start_api_server()

        print("\n" + "="*60)
        print("üéâ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!")
        print("="*60)
        print("ü§ñ Telegram –±–æ—Ç: –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
        print("üåê API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: logs/")
        print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: uzbek_asr.db")
        print("\nüìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: python start_system.py stop")
        print("üìä –î–ª—è —Å—Ç–∞—Ç—É—Å–∞: python start_system.py status")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        print("\n" + "="*60)
        print("üìã –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:")
        print("="*60)
        print("1. ü§ñ Telegram –±–æ—Ç:")
        print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("   - –ü–∏—à—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        print("   - –ü—Ä–æ–≤–µ—Ä—è—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ")
        print()
        print("2. üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:")
        print("   python -m src.models.training.distributed_trainer")
        print()
        print("3. üîó API –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞:")
        print("   curl -X POST http://localhost:8000/transcribe \\")
        print("     -F \"audio=@audio.wav\"")

    elif args.action == "bot-only":
        if not check_requirements():
            sys.exit(1)
        print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞...")
        start_telegram_bot()
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    elif args.action == "api-only":
        if not check_requirements():
            sys.exit(1)
        print("üåê –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ API —Å–µ—Ä–≤–µ—Ä–∞...")
        start_api_server()
        print("‚úÖ API –∑–∞–ø—É—â–µ–Ω")

    elif args.action == "status":
        show_status()

    elif args.action == "stop":
        stop_system()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()