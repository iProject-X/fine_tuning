name: Uzbek Whisper CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist black isort flake8 mypy bandit safety

    - name: Code formatting check
      run: |
        black --check --diff src/ tests/
        isort --check-only --diff src/ tests/

    - name: Linting
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        mypy src/ --ignore-missing-imports

    - name: Security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsndfile1

    - name: Run ${{ matrix.test-type }} tests
      run: |
        pytest tests/${{ matrix.test-type }}/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=pytest-${{ matrix.test-type }}.xml \
          -n auto \
          --disable-warnings

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          pytest-${{ matrix.test-type }}.xml
          htmlcov/
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }}
        name: codecov-${{ matrix.test-type }}

  # Model Training and Validation
  model-training:
    needs: [quality-checks, test]
    runs-on: [self-hosted, gpu]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup DVC
      run: |
        pip install dvc[s3]
        dvc remote modify origin access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        dvc remote modify origin secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Pull data
      run: |
        dvc pull data/processed/train_manifest.json
        dvc pull data/processed/eval_manifest.json

    - name: Train model
      run: |
        python scripts/train_model.py \
          --config configs/training_config.yaml \
          --experiment-name "ci-${GITHUB_SHA::8}" \
          --output-dir models/checkpoints/ci-${GITHUB_SHA::8}
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        CUDA_VISIBLE_DEVICES: 0

    - name: Evaluate model
      run: |
        python scripts/evaluate_model.py \
          --model-path models/checkpoints/ci-${GITHUB_SHA::8}/best_model \
          --test-manifest data/processed/test_manifest.json \
          --output-file evaluation_results.json

    - name: Model quality gate
      run: |
        python scripts/quality_gate.py \
          --metrics-file evaluation_results.json \
          --wer-threshold 0.25 \
          --cer-threshold 0.15 \
          --language-detection-threshold 0.85

    - name: Export model
      if: success()
      run: |
        python scripts/export_model.py \
          --model-path models/checkpoints/ci-${GITHUB_SHA::8}/best_model \
          --output-dir models/exported/ci-${GITHUB_SHA::8} \
          --formats onnx torchscript

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts-${{ github.sha }}
        path: |
          models/exported/ci-${{ github.sha }}
          evaluation_results.json

  # Build and Push Docker Images
  build-and-push:
    needs: [quality-checks, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.serving
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Security Scanning
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    needs: [model-training, build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-asr.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to staging
      run: |
        helm upgrade --install uzbek-whisper-staging ./infrastructure/helm/uzbek-whisper \
          --namespace uzbek-whisper-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set replicas=2 \
          --set resources.limits.memory=4Gi \
          --set resources.limits.cpu=2 \
          --wait --timeout=600s

    - name: Run smoke tests
      run: |
        python scripts/smoke_tests.py \
          --endpoint https://staging-asr.example.com \
          --api-key ${{ secrets.STAGING_API_KEY }}

  # Deploy to Production
  deploy-production:
    needs: [model-training, build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://asr.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to production
      run: |
        helm upgrade --install uzbek-whisper-prod ./infrastructure/helm/uzbek-whisper \
          --namespace uzbek-whisper-production \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.ref_name }} \
          --set environment=production \
          --set replicas=5 \
          --set resources.limits.memory=8Gi \
          --set resources.limits.cpu=4 \
          --set autoscaling.enabled=true \
          --set autoscaling.minReplicas=3 \
          --set autoscaling.maxReplicas=20 \
          --wait --timeout=600s

    - name: Run production health checks
      run: |
        python scripts/health_checks.py \
          --endpoint https://asr.example.com \
          --api-key ${{ secrets.PRODUCTION_API_KEY }} \
          --timeout 300

    - name: Run performance tests
      run: |
        python scripts/performance_tests.py \
          --endpoint https://asr.example.com \
          --api-key ${{ secrets.PRODUCTION_API_KEY }} \
          --load-test-duration 300 \
          --max-rps 100

  # Performance Monitoring
  performance-monitoring:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Setup monitoring alerts
      run: |
        curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/alerts" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "dashboard": {
              "title": "Uzbek Whisper Production Monitoring - ${{ github.ref_name }}"
            }
          }'

    - name: Create deployment annotation
      run: |
        curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/annotations" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": "Deployed version ${{ github.ref_name }} to production",
            "tags": ["deployment", "production", "uzbek-whisper"],
            "time": '$(date +%s000)'
          }'

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
    - name: Cleanup old images
      run: |
        # Keep only last 10 images
        echo "Cleaning up old container images..."
        # Implementation would depend on your registry

    - name: Cleanup old model artifacts
      run: |
        # Keep only last 5 model versions
        echo "Cleaning up old model artifacts..."
        # Implementation would depend on your storage

  # Notification
  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production, cleanup]
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ml-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v') && success()
      uses: softprops/action-gh-release@v1
      with:
        files: |
          evaluation_results.json
          sbom.spdx.json
        generate_release_notes: true
        make_latest: true